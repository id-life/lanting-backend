// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Archive {
  id              Int      @id @default(autoincrement()) @db.UnsignedInt
  title           String
  publisher       String?
  date            String?
  chapter         String
  tag             Json?
  remarks         String?
  originalUrl     String?  @map("original_url")
  archiveFilename String?  @map("archive_filename")
  fileType        String?  @map("file_type")
  likes           Int      @default(0) @db.UnsignedInt
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  comments Comment[]
  authors  ArchiveAuthor[]

  @@map("archives")
}

model Comment {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  nickname  String   @db.VarChar(50)
  content   String   @db.Text
  archiveId Int      @map("archive_id") @db.UnsignedInt
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  archive Archive @relation(fields: [archiveId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Author {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  name      String   @unique @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  archives ArchiveAuthor[]

  @@map("authors")
}

model ArchiveAuthor {
  archiveId Int @map("archive_id") @db.UnsignedInt
  authorId  Int @map("author_id") @db.UnsignedInt
  order     Int @db.UnsignedTinyInt

  archive Archive @relation(fields: [archiveId], references: [id], onDelete: Cascade)
  author  Author  @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@id([archiveId, authorId])
  @@index([archiveId])
  @@index([authorId])
  @@map("archive_authors")
}
